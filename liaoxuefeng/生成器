L=[x*x for x in range(10)]
print(L)

#generator生成器：保存的是算法
g=(x*x for x in range(10))
print(g)

#打印出generator的每个元素
print(next(g))
print(next(g))
print(next(g))

#正确办法
for n in g:
    print(n)

#斐波那契数列
def fib(max):
    n,a,b=0,0,1
    while n<max:
        print(b)
        a,b=b,a+b
        n=n+1
    return 'done'
print(fib(6))

#generator
def fibo(max):
    n,a,b=0,0,1
    while n<max:
        yield b
        a,b=b,a+b
        n=n+1
    return 'done'
print(fibo(6))


for n in fib(6):
    print(n)

#函数是顺序执行，遇到return或者函数最后一行就返回，
#而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行从上次返回的yield语句处继续执行


#定义一个generator，依次返回数字1,3,5
def odd():
    print('step 1')
    yield 1
    print('step 2')
    yield 3
    print('step 3')
    yield 5
